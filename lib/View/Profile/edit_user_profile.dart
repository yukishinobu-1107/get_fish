import 'dart:io';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:animated_theme_switcher/animated_theme_switcher.dart';import 'package:get_fish/Model/user.dart';import 'package:image_picker/image_picker.dart';import 'package:path_provider/path_provider.dart';import '../../Common/parts/user_preference.dart';import '../../Common/widget/button_widget,dart.dart';import '../../Common/widget/profile_widget.dart';import '../../Common/widget/textfield_widget.dart';import '../../Common/widget/appbar_widget.dart';import 'package:path/path.dart';import '../../Model/DbQuery/data.dart';class EditProfilePage extends StatefulWidget {  const EditProfilePage({Key? key}) : super(key: key);  @override  _EditProfilePageState createState() => _EditProfilePageState();}class _EditProfilePageState extends State<EditProfilePage> {  late Users user;  File? image;  @override  void initState() {    super.initState();    user = UserPreferences.getUser();  }  @override  Widget build(BuildContext context) => ThemeSwitchingArea(        child: Builder(          builder: (context) => Scaffold(            appBar: buildAppBar(context),            body: ListView(              padding: EdgeInsets.symmetric(horizontal: 32),              physics: BouncingScrollPhysics(),              children: [                ProfileWidget(                  imagePath: user.imagePath,                  isEdit: true,                  onClicked: () async {                    final image = await ImagePicker()                        .getImage(source: ImageSource.gallery);                    if (image == null) return;                    final directory = await getApplicationDocumentsDirectory();                    final name = basename(image.path);                    final imageFile = File('${directory.path}/$name');                    final newImage =                        await File(image.path).copy(imageFile.path);                    setState(() => user = user.copy(imagePath: newImage.path));                  },                ),                const SizedBox(height: 24),                TextFieldWidget(                  label: '名前',                  text: user.name,                  onChanged: (name) => user = user.copy(name: name),                ),                const SizedBox(height: 24),                TextFieldWidget(                  label: 'ニックネーム',                  text: user.nickName,                  onChanged: (email) => user = user.copy(nickName: email),                ),                const SizedBox(height: 24),                TextFieldWidget(                  label: 'About',                  text: user.about,                  maxLines: 5,                  onChanged: (about) => user = user.copy(about: about),                ),                const SizedBox(height: 24),                ButtonWidget(                  text: 'Save',                  onClicked: () async {                    UserPreferences.setUser(user);                    //   final FirebaseAuth auth = FirebaseAuth.instance;                    // final User? user = auth.currentUser;                    // final uid = user!.uid;                    // String imagePath = '';                    // var results = await DataAccess.uploadImage(                    //     DataAccess.getUid(), image!);                    // imagePath = results;                    // print('------------------imagePath');                    // print(imagePath);                    // UserModel result = UserModel(                    //   //userId: uid,                    //   name: nameController.text,                    //   subName: nickNameController.text,                    //   areaRecommend: areaController.text,                    //   introduction: selfIntroductionController.text,                    //   imagePath: imagePath,                    //   createdTime: Timestamp.now(),                    //   updatedTime: Timestamp.now(),                    // );                    //AuthQuery.myAccount = result;                    await DataAccess.userDetails(user);                    Navigator.of(context).pop();                  },                ),              ],            ),          ),        ),      );}