import 'dart:async';import 'dart:typed_data';import 'package:csv/csv.dart';import 'package:flutter/material.dart';import 'package:flutter/services.dart';import 'package:get_fish/View/NewMap/spot_talk.dart';import 'package:google_maps_flutter/google_maps_flutter.dart';import 'package:geolocator/geolocator.dart';import 'dart:ui' as ui;class Gmap extends StatefulWidget {  const Gmap({Key? key}) : super(key: key);  @override  _GmapState createState() => _GmapState();}class _GmapState extends State<Gmap> {  final _pageController = PageController(    viewportFraction: 0.85, //0.85くらいで端っこに別のカードが見えてる感じになる  );  final Completer<GoogleMapController> _controller = Completer();  GoogleMapController? _mapController;  LatLng? _initialPosition;  bool? loading;  List<List<dynamic>> _data = [];  late BitmapDescriptor pinLocationIcon;  Future<BitmapDescriptor> getMarker() async {    final ui.PictureRecorder pictureRecorder = ui.PictureRecorder();    final Canvas canvas = Canvas(pictureRecorder);    final Paint paint = Paint();    paint.color = Colors.red;    canvas.drawCircle(Offset(100, 35), 25, paint);    final image = await pictureRecorder.endRecording().toImage(100, 100);    final data = await image.toByteData(format: ui.ImageByteFormat.png);    final Uint8List bytes = data!.buffer.asUint8List();    return BitmapDescriptor.fromBytes(bytes);  }  @override  void initState() {    super.initState();    loading = true;    _getUserLocation();    _loadCSV();    setCustomMapPin();  }  void setCustomMapPin() async {    pinLocationIcon = await BitmapDescriptor.fromAssetImage(        ImageConfiguration(devicePixelRatio: 1), 'assets/imgs/fishing_map.png');  }  void _getUserLocation() async {    Position position = await Geolocator.getCurrentPosition(        desiredAccuracy: LocationAccuracy.high);    setState(() {      _initialPosition = LatLng(position.latitude, position.longitude);      loading = false;      print(position);    });  }  void _loadCSV() async {    final _rawData = await rootBundle.loadString("assets/kindacode.csv");    List<List<dynamic>> _listData =        const CsvToListConverter().convert(_rawData);    setState(() {      _data = _listData;    });  }  @override  Widget build(BuildContext context) {    return Padding(      padding: const EdgeInsets.all(15.0),      child: Stack(        alignment: Alignment.bottomCenter,        children: [          _makeGoogleMap(),          _cardSection(),        ],      ),    );  }  Widget _makeGoogleMap() {    if (_initialPosition == null) {      // 現在位置が取れるまではローディング中      return Center(        child: CircularProgressIndicator(),      );    } else {      // Google Map ウィジェットを返す      return GoogleMap(        //初期表示される位置情報を現在位置から設定        markers: _data.map(          (selectedSpots) {            return Marker(              markerId: MarkerId(selectedSpots[0].toString()),              position: LatLng(selectedSpots[1], selectedSpots[2]),              icon: (pinLocationIcon),              onTap: () async {                //タップしたマーカー(shop)のindexを取得                final index = _data.indexWhere((shop) => shop == selectedSpots);                //タップしたお店がPageViewで表示されるように飛ばす                _pageController.jumpToPage(index);              },            );          },        ).toSet(),        initialCameraPosition: CameraPosition(          target: _initialPosition!,          zoom: 14.4746,        ),        onMapCreated: (GoogleMapController controller) {          _controller.complete(controller);        },        // 現在位置にアイコン（青い円形のやつ）を置く        myLocationEnabled: true,        zoomControlsEnabled: true,      );    }  }  Widget _cardSection() {    return Container(      height: 148,      padding: const EdgeInsets.fromLTRB(10, 10, 0, 50),      child: PageView(        onPageChanged: (int index) async {          //スワイプ後のページのお店を取得          final selectedShop = _data.elementAt(index);          //現在のズームレベルを取得          final zoomLevel = await _mapController!.getZoomLevel();          //スワイプ後のお店の座標までカメラを移動          _mapController!.animateCamera(            CameraUpdate.newCameraPosition(              CameraPosition(                target: LatLng(selectedShop[1], selectedShop[2]),                zoom: zoomLevel,              ),            ),          );        },        controller: _pageController,        children: _shopTiles(),      ),    );  }  List<Widget> _shopTiles() {    final _spotTiles = _data.map(      (shop) {        return Card(          child: InkWell(            onTap: () {              print('Tapped');              Navigator.push(                  context,                  MaterialPageRoute(                    builder: (context) => SpotTalk(value: shop[3]),                  ));            },            child: SizedBox(              height: 50,              child: Text(shop[3]),            ),          ),        );      },    ).toList();    return _spotTiles;  }  // final spots = [  //   Spot('1', 35.54247714195198, 139.76279890963383, '多摩川スカイブリッジ'),  //   Spot('2', 35.54321647799686, 139.74203401236446, '大師橋 '),  //   Spot('3', 35.52144015634579, 139.7883085098365, ' 浮島町公園 '),  //   Spot('4', 35.52144015634579, 139.7883085098365, ' 東扇島東公園 '),  //   Spot('5', 35.45567475436918, 139.69716495071015, ' 大黒海づり公園'),  //   Spot('6', 35.619865538454704, 139.83365111282956, '若洲海釣り公園'),  // ];}