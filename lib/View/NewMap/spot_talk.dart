import 'dart:io';import 'package:carousel_slider/carousel_controller.dart';import 'package:carousel_slider/carousel_slider.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import '../../Common/parts/user_preference.dart';import '../../Model/DbQuery/data.dart';import '../../Model/user.dart';import '../Chat/add_spot_talk.dart';import 'package:cloud_firestore/cloud_firestore.dart';import '../Chat/custom_chat_page.dart';class SpotTalk extends StatefulWidget {  final String value;  const SpotTalk({Key? key, required this.value}) : super(key: key);  @override  _SpotTalkState createState() => _SpotTalkState();}class _SpotTalkState extends State<SpotTalk> {  late String state;  late Users user;  File? image;  CarouselController buttonCarouselController = CarouselController();  @override  void initState() {    super.initState();    state = widget.value;    user = UserPreferences.getUser();  }  @override  Widget build(BuildContext context) {    var _scaffoldKey = GlobalKey<ScaffoldState>();    return Scaffold(      key: _scaffoldKey,      appBar: AppBar(        actions: <Widget>[          IconButton(            padding: const EdgeInsets.only(top: 20),            icon: const Icon(              // todo 確認しのぶ バーガーMenu → 協議して再度パネルへ変更予定              Icons.add_circle_outline,            ),            //Postを追加するページへ移行            onPressed: () async {              await Navigator.push(                context,                MaterialPageRoute(                  builder: (context) => AddSpotTalk(value: state),                  fullscreenDialog: true,                ),              );            },          ),          IconButton(            padding: const EdgeInsets.only(top: 20),            icon: const Icon(              Icons.message,            ),            onPressed: () async {              print('Tapped');              Navigator.push(                  context,                  MaterialPageRoute(                    builder: (context) => CustomChatPage(name: state),                    fullscreenDialog: true,                  ));            },          ),        ],        toolbarHeight: 100,        elevation: 0.0,        title: Container(          height: 50,          padding: const EdgeInsets.only(top: 20),          child: Text(state),        ),        centerTitle: true,      ),      body: StreamBuilder<QuerySnapshot>(          stream: DataAccess.getSpotPosts(state),          builder: (context, AsyncSnapshot<QuerySnapshot> snapshot) {            if (snapshot.connectionState == ConnectionState.waiting) {              return CircularProgressIndicator();            }            if (snapshot.hasData) {              return ListView.builder(                itemCount: snapshot.data!.docs.length,                itemBuilder: (BuildContext context, int index) {                  return InkWell(                    splashColor: Theme.of(context).primaryColor,                    borderRadius: BorderRadius.circular(10),                    child: Card(                      shape: RoundedRectangleBorder(                          borderRadius: BorderRadius.circular(10)),                      child: Row(                        children: <Widget>[                          Image.network(                            snapshot.data!.docs[index]['image_path'],                            height: 130,                            errorBuilder: (context, error, stackTrace) {                              return Text('');                            },                          ),                          Expanded(                            child: Container(                              // padding: const EdgeInsets.all(10),                              child: ListTile(                                title: Text(                                  snapshot.data!.docs[index]['user_typed'],                                ),                              ),                            ),                          )                        ],                      ),                    ),                  );                },              );            }            return Text('Loading');          }),    );  }}