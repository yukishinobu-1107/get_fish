import 'dart:io';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:get_fish/Common/user_model.dart';import 'package:get_fish/Model/DbQuery/auth.dart';import 'package:get_fish/Model/DbQuery/data.dart';class AddSpotTalk extends StatefulWidget {  const AddSpotTalk({Key? key, required this.value}) : super(key: key);  final String value;  @override  _AddSpotTalkState createState() => _AddSpotTalkState();}int count = 0;class _AddSpotTalkState extends State<AddSpotTalk> {  late String state;  UserModel? us = AuthQuery.myAccount;  String userTyped = "";  FirebaseFirestore firestore = FirebaseFirestore.instance;  File? image;  ImageProvider getImage() {    if (image == null) {      return NetworkImage(us!.imagePath);    } else {      return FileImage(image!);    }  }  @override  void initState() {    super.initState();    state = widget.value;  }  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(        title: const Text('ポストを追加'),        centerTitle: true,        actions: <Widget>[          //image set          IconButton(            onPressed: () async {              var result = await DataAccess.getImageFromGallery();              if (result != null) {                setState(() {                  image = File(result.path);                  print('//////Image Set Up ////////');                  print(image);                });              }              //}            },            icon: const Icon(              Icons.image_outlined,            ),          ),          TextButton(            onPressed: () async {              final FirebaseAuth auth = FirebaseAuth.instance;              final User? user = auth.currentUser;              final uid = user!.uid;              String imagePath = '';              var results = await DataAccess.uploadImage(uid, image!);              imagePath = results;              print('------------------imagePath');              print(imagePath);              UserModel result = UserModel(                userId: uid,                name: '',                typed: userTyped,                imagePath: imagePath,                createdTime: Timestamp.now(),                updatedTime: Timestamp.now(),              );              DataAccess.AddSpotTalk(result, state);              Navigator.of(context).pop();            },            child: const Text('つぶやく'),          )        ],      ),      body: Center(        child: Container(          child: ListView(            children: <Widget>[              TextField(                keyboardType: TextInputType.multiline,                maxLines: null,                decoration: const InputDecoration(                  border: InputBorder.none,                  hintText: 'つぶやく',                ),                autofocus: true,                onChanged: (String val) {                  setState(() {                    userTyped = val;                  });                },              ),            ],          ),        ),      ),    );  }}